#!/usr/bin/env ruby
# frozen_string_literal: true

path = File.expand_path(File.join(File.dirname(__FILE__), "lib"))
$LOAD_PATH << path

require "rubygems"
require "bundler/setup"
Bundler.require :default
require "docker"

require "optparse"
require "logger"

STOP_DOCKER_CLEANER_FILE = "/tmp/stop-docker-cleaner"

options = {}
options[:registry] = ENV["REGISTRY"]
options[:prefix] = ENV["PREFIX"]
options[:log] = ENV["LOG_FILE"]
options[:docker] = ENV["DOCKER_HOST"]
options[:delete_delay] = ENV["DELETE_DELAY"]
options[:registries] = ENV["REGISTRIES"] || options[:registry]
options[:retention] = ENV["RETENTION"]

OptionParser.new do |opts|
  opts.banner = "Usage: docker_clean [options]"

  opts.on("--delete-delay=DELAY", "Delay in seconds between container/image deletion") do |r|
    options[:delete_delay] = r
  end
  opts.on("-pPREFIX", "--prefix=PREFIX", "Prefix of images your want to clean") do |r|
    options[:prefix] = r
  end
  opts.on("-rREGISTRY", "--registry=REGISTRY", "Registry") do |r|
    options[:registries] = r
  end
  opts.on("--registries=REGISTRIES", "Registries") do |r|
    options[:registries] = r
  end
  opts.on("-lLOG", "--log=LOG", "Log file") do |r|
    options[:log] = r
  end
  opts.on("-dDOCKER", "--docker=DOCKER", "Docker endpoint") do |r|
    options[:docker] = r
  end
  opts.on("--retention=RETENTION", "How long images should be kept before deletion (in hours)") do |r|
    options[:retention] = r
  end

  opts.on("--force", "Force the clean even if the #{STOP_DOCKER_CLEANER_FILE} file is present") do |_r|
    options[:force] = true
  end
end.parse!

logger = Logger.new options[:log] || $stdout

if options[:registries].nil?
  warn "--registries option should be filled"
  exit(-1)
end

options[:registries] = options[:registries].split(",").map(&:chomp)

options[:retention] = options[:retention].to_i
options[:retention] = 6 if options[:retention].zero?

Docker.url = options[:docker] || "http://localhost:4243"
Docker.options = {read_timeout: 300, write_timeout: 300}

if File.file? STOP_DOCKER_CLEANER_FILE
  logger.info "Stop docker cleaner file is present"

  if !options[:force]
    logger.info "Aborting"
    exit 0
  else
    logger.info "Force flag is present, continuing..."
  end
end

require "docker_cleaner"

DockerCleaner.run(
  options[:registries], options[:prefix], logger,
  delay: options[:delete_delay].to_i,
  retention: options[:retention],
)
